#
# Copyright 2007,2016 EUROPEAN UNION
# Licensed under the EUPL, Version 1.2 or - as soon they will be approved by
# the European Commission - subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
# 
# https://ec.europa.eu/isa2/solutions/european-union-public-licence-eupl_en
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and
# limitations under the Licence.
# 
# Date: 2020/05/11
# Authors:
# European Commission, Joint Research Centre - jrc-inspire-support@ec.europa.eu
# 
# This work was supported by the Interoperability solutions for public
# administrations, businesses and citizens programme (http://ec.europa.eu/isa2)
# through Action 2016.10: European Location Interoperability Solutions for e-Government (ELISE)
# for e-Government (ELISE)
# 

# See also https://shiro.apache.org/configuration.html#ini-sections

[main]
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager
authc.loginUrl = /login
authc.successUrl = /index
logout.redirectUrl = /login

# ------------------------
# Database

# Own Realm
# A Realm is a component that can access application-specific security data such as users, roles and permissions.
# Realms usually have a 1-to-1 correlation with a data source such as a relational database, LDAP directory, file system, 
# or other similar resource.
# Here the relational database is used.
# See also https://shiro.apache.org/realm.html
jdbcRealm = eu.europa.ec.re3gistry2.base.utility.RegistryRealm

# Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
sha256Matcher.storedCredentialsHexEncoded = false
sha256Matcher.hashIterations = 1024

jdbcRealm.credentialsMatcher = $sha256Matcher

# User Query
# default is "select password from users where username = ?"
jdbcRealm.authenticationQuery = SELECT shiropassword, shirosalt FROM RegUser WHERE email = ?

# permissions
# jdbcRealm.permissionsLookupEnabled = true
# jdbcRealm.userRolesQuery = select roleName from UserRole where email = ?
# jdbcRealm.permissionsQuery = select permission from RolesPermission where roleName = ?

# Connection 
ds = ${persistence.jdbc.datasource}
ds.serverName = ${persistence.db.address}
ds.databaseName = ${persistence.db.name}
ds.user = ${persistence.jdbc.username}
ds.password = ${persistence.jdbc.password}
jdbcRealm.dataSource=$ds

authc.usernameParam = email
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

# Use Built-in Cache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

securityManager.realms = $jdbcRealm

# See also https://shiro.apache.org/web.html#web-ini-configuration
[urls]
/res/** = anon
/install/** = anon
/installRunning/** = anon
/resetPassword/** = anon
/about/** = anon
/help/** = anon
/login = authc
/logout = logout
/** = authc
