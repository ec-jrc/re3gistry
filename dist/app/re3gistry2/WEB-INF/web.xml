<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_3_0.xsd">
    <display-name>Re3gistry2</display-name>
    <session-config>
        <cookie-config>
            <!-- A cookie with the HttpOnly attribute is inaccessible to the JavaScript Document.cookie API; it's only sent to the server. -->
            <http-only>true</http-only>
            <!-- A cookie with the Secure attribute is only sent to the server with an encrypted request over the HTTPS protocol. 
            It is strongly recommended to set this to true in a production environment; it may be set to false in an internal test environment
            where HTTP is used instead of HTTPS. -->
            <secure>${web.session.cookie.secure}</secure>
            <!-- See more info on https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies
            and on on https://www.freecodecamp.org/news/session-hijacking-and-how-to-stop-it-711e3683d1ac/ -->
        </cookie-config>
    </session-config>
    <!--Configurations-->
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <page-encoding>UTF-8</page-encoding>
        </jsp-property-group>
    </jsp-config>
    <welcome-file-list>
        <welcome-file>login</welcome-file>
    </welcome-file-list>
    <!--Servlet mappings-->
    <servlet>
        <servlet-name>Initializer</servlet-name>
        <servlet-class>eu.europa.ec.re3gistry2.base.utility.Initializer</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Initializer</servlet-name>
        <url-pattern>/Initializer</url-pattern>
    </servlet-mapping>
    
 
      <filter>
        <filter-name>loadSalt</filter-name>
        <filter-class>eu.europa.ec.re3gistry2.web.utility.LoadSalt</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>loadSalt</filter-name>
        <url-pattern>*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>validateSalt</filter-name>
        <filter-class>eu.europa.ec.re3gistry2.web.utility.ValidateSalt</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>validateSalt</filter-name>
        <url-pattern>/login</url-pattern>
        <url-pattern>/addField</url-pattern>
        <url-pattern>/addItem</url-pattern>
        <url-pattern>/addItemclass</url-pattern>
        <url-pattern>/addRegister</url-pattern>
        <url-pattern>/statusChange</url-pattern>
        <url-pattern>/bulkImport</url-pattern><!---->
        <url-pattern>/browse</url-pattern>
        <url-pattern>/field</url-pattern>
        <url-pattern>/controlBody</url-pattern>
        <url-pattern>/install</url-pattern>
        <url-pattern>/migrate</url-pattern>
        <url-pattern>/mapField</url-pattern>
        <url-pattern>/registryManagerGroups</url-pattern>
        <url-pattern>/registryManagerGroupsAdd</url-pattern>
        <url-pattern>/registryManagerUsers</url-pattern>
        <url-pattern>/registryManagerUsersAdd</url-pattern>
        <url-pattern>/resetPassword</url-pattern>
        <url-pattern>/submittingOrganisations</url-pattern>
        <url-pattern>/userProfile</url-pattern>
        <url-pattern>/editItemclass</url-pattern>
    </filter-mapping>
 
    
    <!-- ##########################   -->
    <!--ECAS authentication configs-->
<!--    <login-config>
        <auth-method>ECAS</auth-method>
        <realm-name>Re3gistry2 Realm</realm-name>
    </login-config>
    
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>re3gistry2</web-resource-name>
            <description>requires no ECAS protection</description>
            <url-pattern>/res/*</url-pattern>
            <url-pattern>/rest/*</url-pattern>
            <url-pattern>/install/*</url-pattern>
            <url-pattern>/install</url-pattern>            
            <url-pattern>/ChangeLocale</url-pattern>
            <url-pattern>/login</url-pattern>
            <url-pattern>/installRunning</url-pattern>
            <url-pattern>/about</url-pattern>
            <url-pattern>/help</url-pattern>
        </web-resource-collection>
    </security-constraint>
    
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>re3gistry2</web-resource-name>
            <description>requires ECAS protection</description>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <description>allow users with any role</description>
            <role-name>*</role-name>
        </auth-constraint>
        <user-data-constraint>
            <description>Encryption is not required for the application in general.</description>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

     prevents anyone from accessing the /includes path 
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>re3gistry2</web-resource-name>
            <description>prevents anyone from accessing the /includes path</description>
            <url-pattern>/includes/*</url-pattern>
            <url-pattern>/ajaxServices/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <description>Access forbidden</description>
        </auth-constraint>
        <user-data-constraint>
            <description>Encryption is not required for the application in general.</description>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-role>
        <role-name>*</role-name>
    </security-role>-->
    
    <!--END ECAS authentication configs-->
    
    <!--SHIRO authentication configs, see also https://shiro.apache.org/web.html#web-xml-->
    <!-- The <listener> declaration defines a ServletContextListener that starts up the Shiro 
    environment (including the Shiro SecurityManager) upon web application startup. By default, 
    this listener automatically knows to look for our WEB-INF/shiro.ini file for Shiro configuration.
    From: https://shiro.apache.org/webapp-tutorial.html -->
    <listener>
        <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
    </listener>
    <!-- The <filter> declaration defines the main ShiroFilter. This filter is expected to filter 
    all requests into the web application so Shiro can peform necessary identity and access control 
    operations before allowing a request to reach the application.
    From: https://shiro.apache.org/webapp-tutorial.html -->
    <filter>
        <filter-name>ShiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>ShiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    <!--END SHIRO authentication configs-->
</web-app>
